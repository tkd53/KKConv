#=====================================================================================
#                        SCFGHash.pm
#                             by Shinsuke MORI
#                             Last change : 4 September 1997
#=====================================================================================

# ��  ǽ : ñ���ޥ륳�ե��ǥ����ϥå������Ѥ��Ƽ������롣
#
# ��  �� : �ʤ�
#
# ������ : �����󤫤��ϥå��奭���ؤδؿ���Ϣ�ܤǤ��ꡢ���줬ñ�ͤȤʤ�ɬ�פ����롣


#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

require "class/SCFG.pm";

package SCFGHash;
@ISA = qw( SCFG );

use Carp;
use POSIX;
use DB_File;


#-------------------------------------------------------------------------------------
#                        set variables
#-------------------------------------------------------------------------------------

$SUFFIX = ".db";                                # �ե�����̾�γ�ĥ��


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(IntStr, SIZE, FILE)
#
# ��  ǽ : �ޥ륳�ե��ǥ��Τ����Υϥå������������롣

sub new{
    croak "Virtual function SCFG::new called";
}


#-------------------------------------------------------------------------------------
#                        add
#-------------------------------------------------------------------------------------

# add(Int, STATE, STATE);
#
# ��  ǽ : <STATE, STATE> �����٤� Int ���ä��롣

sub add{
    (@_ == 4) || die;
    my($self, $val) = (shift, shift);

    $$self{pack("I", $_[0])} += $val;
    $$self{pack("I" x scalar(@_), @_)} += $val;

    return($self);
}


#-------------------------------------------------------------------------------------
#                        inc
#-------------------------------------------------------------------------------------

# inc(STATE, STATE);
#
# ��  ǽ : <STATE, STATE> �����٤򥤥󥯥������Ȥ��롣

sub inc{
    (@_ == 3) || (@_ == 4) || die;
    my($self) = shift;

    $$self{""}++;                                 # new !! 09/04
    $$self{pack("I", $_[0])}++;
    $$self{pack("I" x scalar(@_), @_)}++;

    return($self);
}


#-------------------------------------------------------------------------------------
#                        size
#-------------------------------------------------------------------------------------

# size;
#
# ��  ǽ : size ���֤���

sub size{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self{"_size_"});
}


#-------------------------------------------------------------------------------------
#                        _0gram
#-------------------------------------------------------------------------------------

# _0gram(Number)
#
# ��  ǽ : 1-gram ������
#          Number : ���֤��ֹ�

sub _0gram{
    (@_ == 1) || die;
    my($self) = shift;

    return($$self{""});
}


#-------------------------------------------------------------------------------------
#                        _1gram
#-------------------------------------------------------------------------------------

# _1gram(Number)
#
# ��  ǽ : 1-gram ������
#          Number : ���֤��ֹ�

sub _1gram{
    (@_ == 2) || die;
    my($self) = shift;

    return($$self{pack("I", @_)});
}


#-------------------------------------------------------------------------------------
#                        _2gram
#-------------------------------------------------------------------------------------

# _2gram(Number, Number)
#
# ��  ǽ : 2-gram ������
#          Number : ���֤��ֹ�

sub _2gram{
    (@_ == 3) || die;
    my($self) = shift;

    return($$self{pack("II", @_)});
}


#-------------------------------------------------------------------------------------
#                        _3gram
#-------------------------------------------------------------------------------------

# _3gram
#
# ��  ǽ : 3-gram ������

sub _3gram{
    (@_ == 4) || die;
    my($self) = shift;

    return($$self{pack("III", @_)});
}


#-------------------------------------------------------------------------------------
#                        put
#-------------------------------------------------------------------------------------

# put(FILENAME);
#
# ��  ǽ : �ե������˽��Ϥ��롣

sub put{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    (-e $HASH) && unlink($HASH);
    tie(%hash, DB_File, $HASH, O_CREAT|O_RDWR) || die "Can't open $HASH: $!\n";
    $hash{$key} = $val while (($key, $val) = each(%$self));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        get
#-------------------------------------------------------------------------------------

# get(FILENAME);
#
# ��  ǽ : �ե����뤫�����Ϥ���

sub get{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    tie(%hash, DB_File, $HASH, 0) || die "Can't open $HASH: $!\n";
    $$self{$key} = $val while (($key, $val) = each(%hash));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

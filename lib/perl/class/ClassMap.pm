#=====================================================================================
#                        ClassMap.pm
#                             by Shinsuke MORI
#                             Last change : 25 November 2002
#=====================================================================================

# 機  能 : 正数の集合を同値類に分けて扱うためのクラス
#
# 実  例 : なし
#
# 注意点 : なし


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------


#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

package ClassMap;


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(SIZE)
# new(SIZE, STRING)
#
# 機  能 : (0 .. SIZE-1) を自分自身のみを要素とするクラス分割としてインスタンスを生成
#        : STRING が与えられている場合は、これを用いて初期化する。
#
# 実  例 : $CM = new ClassMap(100);
#
# 注意点 : E2CN : 要素番号からクラス番号への写像
#        : C2EL : クラス番号から要素番号リストの参照への写像

sub new{
    (@_ == 2) || (@_ == 3) || die;
    my($type, $size, $string) = @_;

    my($E2CN) = [0 .. $size-1];
    my($C2EL) = [map([$_], (0 .. $size-1))];
    if (@_ == 3){
        $C2EL = [([]) x $size];
        my(@temp) = split(", ", $string);
        while ($_ = pop(@temp)){
            s/\[(.*)\]/$1/;
            $$C2EL[scalar(@temp)] = [map(($$E2CN[$_] = scalar(@temp))*0+$_, split)];
        }
    }
    return(bless({"size" => $size, "E2CN" => $E2CN, "C2EL" => $C2EL}));
}


#-------------------------------------------------------------------------------------
#                        size
#-------------------------------------------------------------------------------------

# size
#
# 機  能 : 要素の数を返す。
#
# 実  例 : &size;
#
# 注意点 : 特になし

sub size{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self{"size"});
}


#-------------------------------------------------------------------------------------
#                        E2CN
#-------------------------------------------------------------------------------------

# E2CN(NUMBER)
#
# 機  能 : NUMBER が属するクラスの番号を返す。
#
# 実  例 : &E2CN(4);
#
# 注意点 : 特になし

sub E2CN{
    (@_ == 2) || die;
    my($self, $elem) = @_;

    return(${$$self{"E2CN"}}[$elem]);
}


#-------------------------------------------------------------------------------------
#                        C2EL
#-------------------------------------------------------------------------------------

# C2EL(NUMBER)
#
# 機  能 : NUMBER のクラスの要素のリストを返す。
#
# 実  例 : &C2EL(4);
#
# 注意点 : 特になし

sub C2EL{
    (@_ == 2) || die;
    my($self, $class) = @_;

    return(@{$$self{"C2EL"}[$class]});
}


#-------------------------------------------------------------------------------------
#                        elem
#-------------------------------------------------------------------------------------

# elem(NUMBER)
#
# 機  能 : NUMBER が属するクラスの要素のリストを返す。
#
# 実  例 : &elem(4);
#
# 注意点 : 特になし

sub elem{
    (@_ == 2) || die;
    my($self, $elem) = @_;

    return($self->C2EL($self->E2CN($elem)));
}


#-------------------------------------------------------------------------------------
#                        list
#-------------------------------------------------------------------------------------

# list
# list(START, END)
#
# 機  能 : C2EL の START から END までの要素を返す。
#
# 実  例 : &list(4, 10);
#
# 注意点 : 特になし

sub list{
    (@_ == 1) || (@_ == 3) || die;
    my($self) = shift;
    
    if (@_ == 0){                                 # 残りの引数がない場合
        return(@{$$self{"C2EL"}});
    }else{
        my($L, $R) = @_;
        return(@{$$self{"C2EL"}}[$L .. $R]);
    }
}


#-------------------------------------------------------------------------------------
#                        move
#-------------------------------------------------------------------------------------

# move(Element)
# move(Element, Class)
#
# 機  能 : Element を Class へ移動する。
#
# 実  例 : $ClassMap->move(100, 10);
#
# 注意点 : Class が指定されなければ新たなクラスを作り、そこへ移動する。

sub move{
    (@_ == 2) || (@_ == 3) || die;
    my($self, $Element) = @_[0, 1];

    my($NewClass);
    if (@_ == 3){                                 # 移動先が与えられている場合
        $NewClass = $_[2];
    }else{                                        # 移動先が与えられてない場合
        $NewClass = $self->findnull;              # 最初の空クラスを移動先とする
    }

    my($OldClass) = $self->E2CN($Element);        # Element が現在属するクラス番号

    $$self{"C2EL"}[$OldClass] = [grep($_ != $Element, $self->C2EL($OldClass))];

    push(@{$$self{"C2EL"}[$NewClass]}, $Element);
    ${$$self{"E2CN"}}[$Element] = $NewClass;
}


#-------------------------------------------------------------------------------------
#                        join
#-------------------------------------------------------------------------------------

# join(Class1, Class2)
#
# 機  能 : Class1 と Class2 をマージする。
#
# 実  例 : $ClassMap->join(100, 10);
#
# 注意点 : なし

sub join{
    (@_ == 3) || die;
    my($self, $class1, $class2) = @_;

#    printf(STDERR "join([%s], [%s])\n",
#           join(" ", @{$$self{"C2EL"}[$class1]}),
#           join(" ", @{$$self{"C2EL"}[$class2]}));

    foreach ($self->C2EL($class2)){
        push(@{$$self{"C2EL"}[$class1]}, $_);
        ${$$self{"E2CN"}}[$_] = $class1;
    }
    $$self{"C2EL"}[$class2] = [];
}


#-------------------------------------------------------------------------------------
#                        findnull
#-------------------------------------------------------------------------------------

# findnull
#
# 機  能 : 空のクラスを探し、そのクラス番号を返す。
#
# 実  例 : $ClassMap->findnull
#
# 注意点 : なし。

sub findnull{
    (@_ == 1) || (@_ == 2) || die;
    my($self, $suff) = (@_, 0);

    for (; $suff < $$self{"size"}; $suff++){
        last if (scalar($self->C2EL($suff)) == 0);
    }
    return($suff);
}


#-------------------------------------------------------------------------------------
#                        read
#-------------------------------------------------------------------------------------

# read(STRING, ...)
#
# 機  能 : ファイルネームが STRING のファイルを読み込み、 move を行なう。
#
# 実  例 : $ClassMap->read("CLinit_SingAll.log")
#
# 注意点 : "move(%d, %d)" または "join(%d, %d)" にマッチする行だけが対象となる。

sub read{
    (@_ > 0) || die;
    my($self, @FILE) = @_;
    my(@keep) = ();

    foreach $FILE (@FILE){
        open(FILE, $FILE) || die "Can't open $FILE: $!\n";
        warn "ClassMap::read $FILE\n";
        while (<FILE>){
            (m/keep\(\s*(\d+)\s*\)/) && push(@keep, $1);
            (m/move\(\s*(\d+)\s*,\s*(\d+)\s*\)/) && $self->move($1+0, $2+0);
            (m/join\(\s*(\d+)\s*,\s*(\d+)\s*\)/) && $self->join($1+0, $2+0);
        }
        close(FILE);
    }

    return(@keep);
}


#-------------------------------------------------------------------------------------
#                        sprint
#-------------------------------------------------------------------------------------

# sprint
# sprint(NUMBER)
#
# 機  能 : インスタンスを文字列に変換する。NUMBER は対象となるクラスの最小メンバ数
#
# 実  例 : $ClassMap->sprint;
#
# 注意点 : 特になし

sub sprint{
    (@_ == 1) || die;
    my($self) = @_;

    join(", ", map(sprintf("[%s]", join(" ", @$_)), $self->list));
}


#-------------------------------------------------------------------------------------
#                        print
#-------------------------------------------------------------------------------------

# print
#
# 機  能 : インスタンスを文字列に変換する。
#
# 実  例 : $ClassMap->print;
#
# 注意点 : 特になし

sub print{
    (@_ == 1) || die;
    my($self) = @_;

    join("\n", map(sprintf("[%s]", join(" ", @$_)), grep(@$_ > 0, $self->list)));
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

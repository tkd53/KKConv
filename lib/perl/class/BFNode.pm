#=====================================================================================
#                        BFNode.pm
#                             by Shinsuke MORI
#                             Last change : 11 July 2001
#=====================================================================================

# 機  能 : Best-First 探索のノード
#
# 実  例 : なし
#
# 注意点 : なし


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

package BFNode;


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(U_INT4, DECIM8, &list<U_INT4>)
#
# 機  能 : インスタンスを生成する。
#
# 実  例 : $node = new BFNode($BT, 0, \@morp);
#
# 注意点 : 特になし

sub new{
    if (@_ == 2){                                 # コピー
        my($type, $orig) = @_;
        return(bless([@{$orig}]));
    }
    if ((@_ == 5) || (@_ == 6)){
        my($type) = shift;
#        my($morp, $logP, $hval, $rest, $prev) = @_;
        return(bless([@_]));
    }
    die;
}


#-------------------------------------------------------------------------------------
#                        morp
#-------------------------------------------------------------------------------------

# morp
#
# 機  能 : 形態素番号を返す。
#
# 実  例 : $node->morp;
#
# 注意点 : なし

sub morp{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[0]);
}


#-------------------------------------------------------------------------------------
#                        logP
#-------------------------------------------------------------------------------------

# logP
#
# 機  能 : 負対数確率値を返す。
#
# 実  例 : $node->logP;
#
# 注意点 : なし

sub logP{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[1]);
}


#-------------------------------------------------------------------------------------
#                        hval
#-------------------------------------------------------------------------------------

# hval
#
# 機  能 : 残りの形態素の生成のための推定最高確率値 hval を返す
#
# 実  例 : $node->hval;
#
# 注意点 : 特になし

sub hval{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[2]);
}


#-------------------------------------------------------------------------------------
#                        rest
#-------------------------------------------------------------------------------------

# rest
#
# 機  能 : 残りの形態素のリストの参照を返す。
#
# 実  例 : $node->rest;
#
# 注意点 : 特になし

sub rest{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[3]);
}


#-------------------------------------------------------------------------------------
#                        prev
#-------------------------------------------------------------------------------------

# prev
#
# 機  能 : 直前のノードを返す。
#
# 実  例 : $node->prev;
#
# 注意点 : なし

sub prev{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[4]);
}


#-------------------------------------------------------------------------------------
#                        fval
#-------------------------------------------------------------------------------------

# fval
#
# 機  能 : 既に生成された形態素の確率値と残りの形態素の生成のための推定最高確率値の和
#
# 実  例 : $node->fval;
#
# 注意点 : なし

sub fval{
    (@_ == 1) || die;
    my($self) = @_;

    return($self->logP+$self->hval);
}


#-------------------------------------------------------------------------------------
#                        sprint
#-------------------------------------------------------------------------------------

# sprint
#
# 機  能 : インスタンスを文字列にして返す
#
# 実  例 : $morp->sprint
#
# 注意点 : 特になし

sub sprint{
    (@_ == 2) || die;
    my($self, $intstr) = @_;

    sprintf("morp = %s, logP = %8.6f, rest = [%s]",
            $intstr->str($self->morp), $self->logP,
            join(" ", map($intstr->str($_), @{$self->rest})));
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

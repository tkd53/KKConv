#=====================================================================================
#                       IntStr.pm
#                             bShinsuke Mori
#                             Last change 17 September 2012
#=====================================================================================

# 機  能 : Integer と String の一対一の対応関係
#
# 注意点 : なし


#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

package IntStr;


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new()
# new(FILENAME)
#
# 機  能 : FILENAME の各行を要素とみなしてインスタンスを生成する。
#
# 注意点 : なし

sub new{
    (@_ == 1) || (@_ == 2) || die;
    my($type, $FILE) = @_;
    my($self) = {};

    $self->{"size"} = 0;
    $self->{"IntStr"} = [];                       # Int から Str への写像
    $self->{"StrInt"} = {};                       # Str から Int への写像

    if (@_ == 2){
#        warn "IntStr::new $FILE exist\n";
        open(FILE, $FILE) || die "Can't open $FILE: $!\n";
        $self->{"size"} = chomp(@{$self->{"IntStr"}} = <FILE>);
        close(FILE);

        foreach (0 .. $#{$self->{"IntStr"}}){
            ${$self->{"StrInt"}}{${$self->{"IntStr"}}[$_]} = $_;
        }
    }

    return(bless($self));
}


#-------------------------------------------------------------------------------------
#                        size
#-------------------------------------------------------------------------------------

# size;
#
# 機  能 : size を返す。
#
# 実  例 : 
#
# 注意点 : 

sub size{
    (@_ == 1) || die;
    my($self) = @_;

    return($self->{"size"});
}


#-------------------------------------------------------------------------------------
#                        int
#-------------------------------------------------------------------------------------

# int(STR);
#
# 機  能 : STR に対応する Int を返す。
#
# 注意点 : STR が登録されていなければ undef ではなく 0 を返す。

sub int{
    (@_ == 2) || die;
    my($self, $STR) = @_;

    return(${$self->{"StrInt"}}{$STR}+0);
}


#-------------------------------------------------------------------------------------
#                        str
#-------------------------------------------------------------------------------------

# str(INT);
#
# 機  能 : INT に対応する STR を返す
#
# 注意点 : なし

sub str{
    (@_ == 2) || die;
    my($self, $INT) = @_;

    return(${$self->{"IntStr"}}[$INT]);
}


#-------------------------------------------------------------------------------------
#                        add
#-------------------------------------------------------------------------------------

# add(STR);
#
# 機  能 : 要素の追加
#
# 注意点 : 既に含まれているかのチェックはされない

sub add{
    (@_ == 2) || die;
    my($self, $STR) = @_;

    push(@{$self->{"IntStr"}}, $STR);
    ${$self->{"StrInt"}}{$STR} = $self->size;
    $self->{"size"}++;
}


#-------------------------------------------------------------------------------------
#                        strs
#-------------------------------------------------------------------------------------

# strs;
#
# 機  能 : 登録されている STR からなる配列を返す
#
# 注意点 : なし

sub strs{
    (@_ == 1) || die;
    my($self) = @_;

    return(map($self->str($_), (0 .. $self->size-1)));

#    return(keys(%{$self->{"StrInt"}}));
}


#-------------------------------------------------------------------------------------
#                        print
#-------------------------------------------------------------------------------------

# print;
#
# 機  能 : 対応関係を表示する
#
# 注意点 : なし

sub print{
    (@_ == 1) || die;
    my($self) = @_;

    my($i);

    for ($i = 0; $i < $self->{"size"}; $i++){
        printf("%8d -> %8s\n", $i, $self->str($i));
    }

    while (($key, $val) = each(%{$self->{"StrInt"}})){
        printf("%8s => %8d\n", $key, $val);
    }

    return($self);
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

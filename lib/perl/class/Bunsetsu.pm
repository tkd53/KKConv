#=====================================================================================
#                        Bunsetsu.pm
#                             by Shinsuke MORI
#                             Last change : 24 October 1997
#=====================================================================================

# 機  能 : 文節を扱うクラス
#
# 実  例 : なし
#
# 注意点 : 属性を返す関数が2つある。
#
#            attrib -> 品詞 品詞 句読点
#            Attrib -> 表記/品詞 表記/品詞 句読点
#


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

package Bunsetsu;

($TRUE, $FALSE) = ("T", "F");

%ISKUTOUTEN = ("、/記号" => "読点", "，/記号" => "読点",
               "。/記号" => "句点", "．/記号" => "句点");

@Pref = ("接頭語");
@Cont = ("名詞", "動詞", "形容動詞", "数字", "副詞", "形容詞", "連体詞", "接続詞",
         "記号", "感動詞");
@Suff = ("接尾語");
@Func = ("助詞", "助動詞", "語尾");

%PCSF = (map(($_ => "Pref"), @Pref), map(($_ => "Cont"), @Cont),
         map(($_ => "Suff"), @Suff), map(($_ => "Func"), @Func));

($SONOTA, $JIRITU, $FUZOKU) = (1, 2, 3);
%TYPE = (map(($_ => $JIRITU), @Pref, @Cont, @Suff), map(($_ => $FUZOKU), @Func));


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(ARRAY)
#
# 機  能 : 形態素("表記/品詞")のリストを文節とみなしてインスタンスを生成する。
#
# 実  例 : $bunsetsu = new Bunsetsu(@list);
#
# 注意点 : 特になし

sub new{
    (@_ > 1) || die;
    my($type) = shift(@_);
    my($dest) = shift(@_);
    my(@Cont) = ();    
    my(@Func) = ();    
    my(@Sign) = ();

    $temp = join(" ", @_);
    if (($temp eq "２/数字 ．/記号 、/記号") || ($temp eq "３/数字 ．/記号 、/記号")){
        @Sign = pop(@_);
        @Func = ();
        @Cont = @_;
        return(bless([\@Cont, \@Func, \@Sign, $dest]));
    }

    if ($ISKUTOUTEN{$_[-1]}){
        @Sign = pop(@_);
    }
    if (@_ > 0){
        unshift(@Func, pop(@_)) while ((@_ > 0) && (&TYPE($_[-1]) == $FUZOKU));
    }
    if (@_ > 0){
        @Cont = @_;
    }

    return(bless([\@Cont, \@Func, \@Sign, $dest]));
}


#-------------------------------------------------------------------------------------
#                        attrib
#-------------------------------------------------------------------------------------

# attrib
#
# 機  能 : 文節の属性を返す
#          返値 = (内容語の品詞, 附属語の品詞, 句点の種類)
#
# 実  例 : @attrib = $bunsetsu->attrib;
#
# 注意点 : 特になし

sub attrib{
    (@_ == 1) || die;
    my($self) = @_;
    
    my($Cont) = (split("/", ($self->cont)[-1]))[1];
    my($Func) = ($self->func) ? (split("/", ($self->func)[-1]))[1] : "NULL";
    my($Sign) = ($self->sign) ? $ISKUTOUTEN{($self->sign)[-1]} : "NULL";

    return($Cont, $Func, $Sign);
}


#-------------------------------------------------------------------------------------
#                        Attrib
#-------------------------------------------------------------------------------------

# Attrib
#
# 機  能 : 文節の属性を返す
#          返値 = (内容語の表記/品詞, 附属語の表記/品詞, 句点の有無)
#
# 実  例 : @Attrib = $bunsetsu->Attrib;
#
# 注意点 : 特になし

sub Attrib{
    (@_ == 1) || die;
    my($self) = @_;
    
    my($Cont) = ($self->cont)[-1];
    my($Func) = ($self->func) ? ($self->func)[-1] : "NULL";
    my($Sign) = ($self->sign) ? $ISKUTOUTEN{($self->sign)[-1]} : "NULL";

    return($Cont, $Func, $Sign);
}


#-------------------------------------------------------------------------------------
#                        ATTRIB
#-------------------------------------------------------------------------------------

# ATTRIB
#
# 機  能 : 文節の属性を返す
#          返値 = (内容語の表記/品詞, 附属語の表記/品詞, 句点の有無)
#
# 実  例 : @Attrib = $bunsetsu->Attrib;
#
# 注意点 : 特になし

sub ATTRIB{
    (@_ == 2) || die;
    my($self, $SEPA) = @_;
    
    my($Cont) = join($SEPA, $self->cont);
    my($Func) = ($self->func) ? join($SEPA, $self->func) : "NULL";
    my($Sign) = ($self->sign) ? $ISKUTOUTEN{($self->sign)[-1]} : "NULL";

    return($Cont, $Func, $Sign);
}


#-------------------------------------------------------------------------------------
#                        TYPE
#-------------------------------------------------------------------------------------

# TYPE(STRING)
#
# 機  能 : STRING = 表記/品詞 が自立語か否かを返す。
#
# 実  例 : &TYPE($string);
#
# 注意点 : 特になし

sub TYPE{
#    (@_ == 1) || die;
    my($string) = @_;

    return($FUZOKU) if ($ISKUTOUTEN{$string});
    return($TYPE{(split("/", $string))[1]});
}


#-------------------------------------------------------------------------------------
#                        morphs
#-------------------------------------------------------------------------------------

# morphs
#
# 機  能 : 文節を構成する形態素列を返す。
#
# 実  例 : $bunsetsu->morphs;
#
# 注意点 : "表記/品詞" のリストである。

sub morphs{
    (@_ == 1) || die;
    my($self) = @_;

    return(@{$$self[0]}, @{$$self[1]}, @{$$self[2]});
}


#-------------------------------------------------------------------------------------
#                        cont
#-------------------------------------------------------------------------------------

# cont
#
# 機  能 : 文節を構成する自立形態素列を返す。
#
# 実  例 : $bunsetsu->cont;
#
# 注意点 : "表記/品詞" のリストである。

sub cont{
    (@_ == 1) || die;
    my($self) = @_;

    return(@{$$self[0]});
}


#-------------------------------------------------------------------------------------
#                        func
#-------------------------------------------------------------------------------------

# func
#
# 機  能 : 文節を構成する付属形態素列を返す。
#
# 実  例 : $bunsetsu->func;
#
# 注意点 : "表記/品詞" のリストである。

sub func{
    (@_ == 1) || die;
    my($self) = @_;

    return(@{$$self[1]});
}


#-------------------------------------------------------------------------------------
#                        sign
#-------------------------------------------------------------------------------------

# sign
#
# 機  能 : 文節を構成する句読点形態素列を返す。
#
# 実  例 : $bunsetsu->sign;
#
# 注意点 : "表記/品詞" のリストである。常に要素数は 1 である。

sub sign{
    (@_ == 1) || die;
    my($self) = @_;

    return(@{$$self[2]});
}


#-------------------------------------------------------------------------------------
#                        destin
#-------------------------------------------------------------------------------------

# destin
#
# 機  能 : 文節を構成する形態素列を返す。
#
# 実  例 : $bunsetsu->destin;
#
# 注意点 : "表記/品詞" のリストである。

sub destin{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self[3]);
}


#-------------------------------------------------------------------------------------
#                        string
#-------------------------------------------------------------------------------------

# string
#
# 機  能 : 文節を構成する形態素列を返す。
#
# 実  例 : $bunsetsu->string;
#
# 注意点 : "表記/品詞" のリストである。

sub string{
    (@_ == 2) || die;
    my($self, $sepa) = @_;

    return(join($sepa, $self->morphs));
}


#-------------------------------------------------------------------------------------
#                        MatchPattern
#-------------------------------------------------------------------------------------

# MatchPattern(STRING)
#
# 機  能 : 文節がSTRING で表わされるパターにマッチするか否かを返す。
#
# 実  例 : $bunsetsu->MatchPattern("(Pref)*(Cont)+(Suff)*(Func)*(Sign)?");
#
# 注意点 : 特になし

sub MatchPattern{
    (@_ == 2) || die;
    my($self, $pattern) = @_;

    my(@morphs) = $self->morphs;

    my($string) = ($ISKUTOUTEN{$morphs[$#morphs]} && pop(@morphs)) ? "Sign" : "";

    $string = join("", map($PCSF{(split("/", $_))[1]}, @morphs), $string);

    return($string =~ /^$pattern$/);
}


#-------------------------------------------------------------------------------------
#                        print
#-------------------------------------------------------------------------------------

# print
#
# 機  能 : インスタンスを表示する。
#
# 実  例 : $bunsetsu->print;
#
# 注意点 : 特になし

sub print{
    (@_ == 1) || die;
    my($self) = @_;

    print $self->sprint;
}


#-------------------------------------------------------------------------------------
#                        sprint
#-------------------------------------------------------------------------------------

# sprint
#
# 機  能 : インスタンスを文字列にして返す
#
# 実  例 : $bunsetsu->sprint
#
# 注意点 : 特になし

sub sprint{
    (@_ == 1) || die;
    my($self) = @_;

    join(" ", sprintf("%d", $self->destin), $self->morphs);
#    join(" ", $self->morphs);
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

#=====================================================================================
#                        RectMarkovHash.pm
#                             by Shinsuke MORI
#                             Last change : 15 April 1999
#=====================================================================================

# ��  ǽ : ñ���ޥ륳�ե��ǥ����ϥå������Ѥ��Ƽ������롣
#
# ��  �� : �ʤ�
#
# ������ : �����󤫤��ϥå��奭���ؤδؿ���Ϣ�ܤǤ��ꡢ���줬ñ�ͤȤʤ�ɬ�פ����롣


#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

require "class/RectMarkov.pm";

package RectMarkovHash;
@ISA = qw( RectMarkov );

use Carp;
use POSIX;
use DB_File;


#-------------------------------------------------------------------------------------
#                        set variables
#-------------------------------------------------------------------------------------

$SUFFIX = ".db";                                # �ե�����̾�γ�ĥ��


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(IntStr, SIZE, FILE)
#
# ��  ǽ : �ޥ륳�ե��ǥ��Τ����Υϥå������������롣

sub new{
    (@_ == 2) || (@_ == 3) || die;
    my($type, $size, $FILE) = @_;
#    printf(STDERR "%s::new(%d, %s)\n", $type, $size, $FILE);

    my($self) = {};

    $$self{"_size_"} = $size;

    bless($self);

    $self->get($FILE) if (defined($FILE));

    return($self);
}



#-------------------------------------------------------------------------------------
#                        add
#-------------------------------------------------------------------------------------

# add(Int, STATE, STATE);
#
# ��  ǽ : <STATE, STATE> �����٤� Int ���ä��롣

sub add{
    (@_ == 4) || die;
    my($self, $val) = (shift, shift);

    $$self{pack("II", @_)} += $val;
    $$self{"Le" . pack("I", $_[0])} += $val;
    $$self{"Ri" . pack("I", $_[1])} += $val;
    $$self{pack("")} += $val;

    return($self);
}


#-------------------------------------------------------------------------------------
#                        inc
#-------------------------------------------------------------------------------------

# inc(STATE, STATE);
#
# ��  ǽ : <STATE, STATE> �����٤򥤥󥯥������Ȥ��롣

sub inc{
    (@_ == 3) || die;
    my($self) = shift;

    $$self{pack("II", @_)}++;
    $$self{"Le" . pack("I", $_[0])}++;
    $$self{"Ri" . pack("I", $_[1])}++;
    $$self{pack("")}++;

    return($self);
}


#-------------------------------------------------------------------------------------
#                        size
#-------------------------------------------------------------------------------------

# size;
#
# ��  ǽ : size ���֤���

sub size{
#    warn "MarkovHash::size()\n";
    (@_ == 1) || die;
    my($self) = @_;

    return($$self{"_size_"});
}


#-------------------------------------------------------------------------------------
#                        _0gram
#-------------------------------------------------------------------------------------

# _0gram
#
# ��  ǽ : 0-gram ������

sub _0gram{
    (@_ == 1) || die;
    my($self) = shift;

    return($$self{pack("")});
}


#-------------------------------------------------------------------------------------
#                        _1gramRi
#-------------------------------------------------------------------------------------

# _1gramRi(Number)
#
# ��  ǽ : 1-gram ������
#          Number : ���֤��ֹ�

sub _1gramRi{
    (@_ == 2) || die;
    my($self) = shift;

    return($$self{"Ri" . pack("I", @_)});
}


#-------------------------------------------------------------------------------------
#                        _1gramLe
#-------------------------------------------------------------------------------------

# _1gramLe(Number)
#
# ��  ǽ : 1-gram ������
#          Number : ���֤��ֹ�

sub _1gramLe{
    (@_ == 2) || die;
    my($self) = shift;

    return($$self{"Le" . pack("I", @_)});
}


#-------------------------------------------------------------------------------------
#                        _2gram
#-------------------------------------------------------------------------------------

# _2gram(Number, Number)
#
# ��  ǽ : 2-gram ������
#          Number : ���֤��ֹ�

sub _2gram{
    (@_ == 3) || croak;
    my($self) = shift;

    return($$self{pack("II", @_)});
}


#-------------------------------------------------------------------------------------
#                        put
#-------------------------------------------------------------------------------------

# put(FILENAME);
#
# ��  ǽ : �ե������˽��Ϥ��롣

sub put{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    (-e $HASH) && unlink($HASH);
    tie(%hash, DB_File, $HASH, O_CREAT|O_RDWR) || die "Can't open $HASH: $!\n";
#    %hash = %$self;
    $hash{$key} = $val while (($key, $val) = each(%$self));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        get
#-------------------------------------------------------------------------------------

# get(FILENAME);
#
# ��  ǽ : �ե����뤫�����Ϥ���

sub get{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    tie(%hash, DB_File, $HASH, 0) || die "Can't open $HASH: $!\n";
    $$self{$key} = $val while (($key, $val) = each(%hash));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

#=====================================================================================
#                        Markov2ndHash.pm
#                             by Shinsuke MORI
#                             Last change : 11 December 2000
#=====================================================================================

# 機  能 : 単純マルコフモデルをハッシュを用いて実装する。
#
# 実  例 : なし
#
# 注意点 : 状態列からハッシュキーへの関数は連接であり、これが単射となる必要がある。


#-------------------------------------------------------------------------------------
#                        declalations
#-------------------------------------------------------------------------------------

require "class/Markov2nd.pm";

package MarkovHash;
@ISA = qw( Markov );

use Carp;
use POSIX;
use DB_File;


#-------------------------------------------------------------------------------------
#                        set variables
#-------------------------------------------------------------------------------------

$SUFFIX = ".db";                                # ファイル名の拡張子


#-------------------------------------------------------------------------------------
#                        new
#-------------------------------------------------------------------------------------

# new(IntStr, SIZE, FILE)
#
# 機  能 : マルコフモデルのためのハッシュを生成する。

sub new{
    croak "Virtual function Markov::new called";
}


#-------------------------------------------------------------------------------------
#                        add
#-------------------------------------------------------------------------------------

# add(Int, STATE, STATE, STATE);
#
# 機  能 : <STATE, STATE, STATE> の頻度に Int を加える。

sub add{
    (@_ == 5) || die;
    my($self, $val) = (shift, shift);

    for (push(@_, 0); @_ > 0; shift){
        $$self{pack("I" x scalar(@_), @_)} += $val;
    }

#    do{
#        $$self{pack("I" x scalar(@_), @_)} += $val;
#    }while (defined(shift));

    return($self);
}


#-------------------------------------------------------------------------------------
#                        inc
#-------------------------------------------------------------------------------------

# inc(STATE, STATE, STATE);
#
# 機  能 : <STATE, STATE, STATE> の頻度をインクリメントする。

sub inc{
    (@_ == 4) || die;
    my($self) = shift;

    for (push(@_, 0); @_ > 0; shift){
        $$self{pack("I" x scalar(@_), @_)}++;
    }

#    do{
#        $$self{pack("I" x scalar(@_), @_)}++;
#    }while (defined(shift));

    return($self);
}


#-------------------------------------------------------------------------------------
#                        size
#-------------------------------------------------------------------------------------

# size;
#
# 機  能 : size を返す。

sub size{
    (@_ == 1) || die;
    my($self) = @_;

    return($$self{"__size__"});
}


#-------------------------------------------------------------------------------------
#                        _0gram
#-------------------------------------------------------------------------------------

# _0gram
#
# 機  能 : 0-gram の頻度

sub _0gram{
    (@_ == 1) || die;
    my($self) = shift;

    return($$self{pack("I" x 1, (@_, 0))});
#    return($$self{pack("")});
}


#-------------------------------------------------------------------------------------
#                        _1gram
#-------------------------------------------------------------------------------------

# _1gram(Number)
#
# 機  能 : 1-gram の頻度
#          Number : 状態の番号

sub _1gram{
    (@_ == 2) || die;
    my($self) = shift;

    return($$self{pack("I" x 2, (@_, 0))});
#    return($$self{pack("I", @_)});
}


#-------------------------------------------------------------------------------------
#                        _2gram
#-------------------------------------------------------------------------------------

# _2gram(Number, Number)
#
# 機  能 : 2-gram の頻度
#          Number : 状態の番号

sub _2gram{
    (@_ == 3) || croak;
    my($self) = shift;

    return($$self{pack("I" x 3, (@_, 0))});
#    return($$self{pack("II", @_)});
}


#-------------------------------------------------------------------------------------
#                        _3gram
#-------------------------------------------------------------------------------------

# _3gram(Number, Number, Number)
#
# 機  能 : 3-gram の頻度
#          Number : 状態の番号

sub _3gram{
    (@_ == 4) || croak;
    my($self) = shift;

    return($$self{pack("I" x 4, (@_, 0))});
#    return($$self{pack("III", @_)});
}


#-------------------------------------------------------------------------------------
#                        put
#-------------------------------------------------------------------------------------

# put(FILENAME);
#
# 機  能 : ファイルに出力する。

sub put{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    (-e $HASH) && unlink($HASH);
    tie(%hash, DB_File, $HASH, O_CREAT|O_RDWR) || die "Can't open $HASH: $!\n";
#    %hash = %$self;
    $hash{$key} = $val while (($key, $val) = each(%$self));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        get
#-------------------------------------------------------------------------------------

# get(FILENAME);
#
# 機  能 : ファイルから入力する

sub get{
    (@_ == 2) || die;
    my($self, $FILE) = @_;

    my($HASH) = $FILE . $SUFFIX;
    tie(%hash, DB_File, $HASH, 0) || die "Can't open $HASH: $!\n";
#    %$self = %hash;
    $$self{$key} = $val while (($key, $val) = each(%hash));
    untie(%hash);

    return($self);
}


#-------------------------------------------------------------------------------------
#                        nonzero
#-------------------------------------------------------------------------------------

# nonzero();
#
# 機  能 : 非零の 2-gram 数を返す

sub nonzero{
    (@_ == 1) || die;
    my($self) = @_;
    my($rval) = 0;

    while (($key, $val) = each(%$self)){
        (length($key) == 4*4) && $rval++;
    }

    return($rval);
}


#-------------------------------------------------------------------------------------
#                        return
#-------------------------------------------------------------------------------------

1;


#=====================================================================================
#                        END
#=====================================================================================

#!/usr/bin/perl
#=====================================================================================
#                        distance.perl<2>
#                             by Shinsuke MORI
#                             Last change : 18 November 2001
#=====================================================================================

# 機  能 : 形態素列のファイルを読み込み編集距離を計算する。
#
# 使用法 : distance.perl (修正前) (修正後) (begin line) (end line)
#
# 実  例 : distance.perl EHJ10000.tagger EHJ0001.cps 
#
# 注意点 : 一文が一行に対応していること。


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------

use Env;
use File::Basename;
unshift(@INC, dirname($0), "$HOME/usr/lib/perl");

require "Help.pm";
require "Parallel.pm";


#-------------------------------------------------------------------------------------
#                        check arguments
#-------------------------------------------------------------------------------------

((@ARGV == 4) && ($ARGV[0] ne "-help")) || &Help($0);

($FILE1, $FILE2, $BEG, $END) = @ARGV;


#-------------------------------------------------------------------------------------
#                        set variable
#-------------------------------------------------------------------------------------


#-------------------------------------------------------------------------------------
#                        initialize
#-------------------------------------------------------------------------------------

open(FILE1) || die "Can't open $FILE1: $!\n";
open(FILE2) || die "Can't open $FILE2: $!\n";


#-------------------------------------------------------------------------------------
#                        main
#-------------------------------------------------------------------------------------

for ($line = 1; $line < $BEG; $line++){
    $line1 = <FILE1>;                             # 読み飛ばし
    $line2 = <FILE2>;                             # 読み飛ばし
}

$CHR = 0;
$POS = 0;                                         # 品詞変更の数
$SEG = 0;                                         # 境界変更の数

while (($line++ <= $END) && chop($line1 = <FILE1>) && chop($line2 = <FILE2>)){
    @tmp1 = @tmp2 = ();                           # 出力用のテンポラリ
    $line1 =~ s/(\d\d\d\d\d\dIN|IN|EX|UM)//g;     # IN, EX, UM の消去
    $line1 =~ s/ [\d\.]+//;                       # logP の消去
    @line1 = split(/[ \t\n]+/, $line1);
    @line2 = split(/[ \t\n]+/, $line2);
#    print join(" ", @line1), "\n";
#    print join(" ", @line2), "\n\n";

    for ($pos1 = $pos2 = 0; @line1 || @line2; ){  # 各形態素の比較
        ($hyouki1, $hinshi1) = split("/", shift(@line1));
        ($hyouki2, $hinshi2) = split("/", shift(@line2));
        $pos1 += length($hyouki1);
        $pos2 += length($hyouki2);
        if ($pos1 == $pos2){
            ($hyouki1 eq $hyouki2) || die;
            $POS++ if ($hinshi1 ne $hinshi2);
        }else{
            while ($pos1 != $pos2){
                if ($pos1 < $pos2){
                    ($hyouki1, $hinshi1) = split("/", shift(@line1));
                    $pos1 += length($hyouki1);
                    $SEG++;
                    next;
                }
                if ($pos1 > $pos2){
                    ($hyouki2, $hinshi2) = split("/", shift(@line2));
                    $pos2 += length($hyouki2);
                    $SEG++;
                    $POS++;
                    next;
                }
            }
            $POS++;
        }
    }
    (@line1 == @line2) || die;
    ($pos1 == $pos2) || die;
    $CHR += $pos1/2;
}

#printf("文字 = %d, 品詞変更 = %d, 境界変更 = %d\n", $CHR, $POS, $SEG);
printf("%4d %4d %4d\n", $CHR, $POS, $SEG);


#-------------------------------------------------------------------------------------
#                        close
#-------------------------------------------------------------------------------------

close(FILE1);
close(FILE2);
exit(0);


#=====================================================================================
#                        END
#=====================================================================================

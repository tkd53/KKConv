#!/usr/bin/env perl
use bytes;
#=====================================================================================
#                        CorpusStat.perl
#                             by Shinsuke MORI
#                             Last change : 1 May 2005
#=====================================================================================

# 機  能 : 形態素 2-gram を用いて Cross Entropy を計算する。
#
# 使用法 : CorpusStat.perl
#
# 実  例 : CorpusStat.perl
#
# 注意点 : (filestem).morphs は "表記/品詞 ..." となっていなければならない。
#          行数が 4**ARGV[0] で割り切れる文だけを用いて学習する。
#          動作確認には ARGV[0] = 7 程度が適当


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------

use Env;
use File::Basename;
unshift(@INC, dirname($0), "$HOME/usr/lib/perl", "$HOME/SLM/lib/perl");

require "Help.pm";
require "class/IntStr.pm";


#-------------------------------------------------------------------------------------
#                        check arguments
#-------------------------------------------------------------------------------------

((@ARGV == 1) && ($ARGV[0] ne "-help")) || &Help($0);
print STDERR join(" ", basename($0), @ARGV), "\n";

$STEP = 4**shift;                                 # 学習コーパスの文のステップ


#-------------------------------------------------------------------------------------
#                        共通の変数や関数の定義を読み込む
#-------------------------------------------------------------------------------------

do "dofile/CrossEntropyBy.perl";
do "dofile/CrossEntropyByMorp.perl";


#-------------------------------------------------------------------------------------
#                        $MorpIntStr の生成
#-------------------------------------------------------------------------------------

$MIN = 1;

(-e ($FILE = "MorpIntStr.text")) ||               # ファイルがあるか？なければ作る。
    &MorpIntStr($FILE, map(sprintf($CTEMPL, $_), @Kcross));
$MorpIntStr = new IntStr($FILE);


#-------------------------------------------------------------------------------------
#                        学習コーパスの統計
#-------------------------------------------------------------------------------------

$Lchar = $Lmorp = $Lsent = 0;                     # 文字数・形態素数・文数
$Lknown = 0;                                      # 既知形態素数

foreach $CORPUS (map(sprintf($CTEMPL, $_), @Kcross)){
    open(CORPUS) || die "Can't open $CORPUS: $!\n";
    warn "Reading $CORPUS\n";
    while (<CORPUS>){                             # 文単位のループ
        ($.%$STEP == 0) || next;
#        @morp = (split);                          # pat
#        @hist = (shift(@morp), shift(@morp));
#        @hist = ("BT", "BT");
#        @morp = @morp[0,1];
#        @char = &Morphs2Chars(join(" ", @morp));  # pat
        @char = &Morphs2Chars($_);
        @morp = split;
        $Lsent++;
        $Lmorp += @morp;
        $Lchar += @char;
        foreach $morp (@morp){                    # 形態素単位のループ
            ($MorpIntStr->int($morp)) && $Lknown++; # 登録語の場合
        }
    }
    close(CORPUS);
}


#-------------------------------------------------------------------------------------
#                        テストコーパスの統計
#-------------------------------------------------------------------------------------

$Tchar = $Tmorp = $Tsent = 0;                     # 文字数・形態素数・文数
$Tknown = 0;                                      # 既知形態素数

$CORPUS = sprintf($CTEMPL, 10);                   # テストコーパス
open(CORPUS) || die "Can't open $CORPUS: $!\n";
warn "Reading $CORPUS\n";
while (<CORPUS>){                                 # 文単位のループ
#    @morp = (split);                              # pat
#    @hist = (shift(@morp), shift(@morp));
#    @hist = ("BT", "BT");
#    @morp = @morp[0,1];                           # pat
#    @char = &Morphs2Chars(join(" ", @morp));
    @char = &Morphs2Chars($_);
    @morp = split;
    $Tsent++;
    $Tmorp += @morp;
    $Tchar += @char;
    foreach $morp (@morp){                        # 形態素単位のループ
        ($MorpIntStr->int($morp)) && $Tknown++;   # 登録語の場合
    }
}
close(CORPUS);
warn "\n";


#-------------------------------------------------------------------------------------
#                        結果の出力
#-------------------------------------------------------------------------------------

printf("--------------------------------------------------------\n");
printf("        |  文    数 |  形態素数 |  文 字 数 |  カバー率 \n");
printf("--------+-----------+-----------+-----------+-----------\n");
printf(" 学  習 | %9s | %9s | %9s | %7.2f %% \n",
       map(&InsertCommas($_), $Lsent, $Lmorp, $Lchar), 100*$Lknown/$Lmorp);
printf(" テスト | %9s | %9s | %9s | %7.2f %% \n",
       map(&InsertCommas($_), $Tsent, $Tmorp, $Tchar), 100*$Tknown/$Tmorp);
printf("--------------------------------------------------------\n");


#-------------------------------------------------------------------------------------
#                        close
#-------------------------------------------------------------------------------------

exit(0);


#-------------------------------------------------------------------------------------
#                        InsertCommas
#-------------------------------------------------------------------------------------

sub InsertCommas{
    (@_ == 1) || die;
    my($temp) = sprintf("%d", shift);
    my(@elem) = ();
    while ($temp =~ s/(\d)(\d\d\d)$/$1/){
        unshift(@elem, $2);
    }
    return(join(",", $temp, @elem));
}


#=====================================================================================
#                        END
#=====================================================================================

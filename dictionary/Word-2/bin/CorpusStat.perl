#!/usr/bin/env perl
use bytes;
#=====================================================================================
#                       CorpusStat.perl
#                             bShinsuke Mori
#                             Last change 11 May 2009
#=====================================================================================

# ��  ǽ : ñ��(ɽ��) 2-gram �Υ����ѥ����Ф�������
#
# ����ˡ : CorpusStat.perl (STEP) [FILENAME]
#
# ��  �� : CorpusStat.perl 4
#
# ������ : (filestem).morp �� "ɽ��/�ʻ� ..." �ȤʤäƤ��ʤ����Фʤ��ʤ���
#          �Կ��� 4**ARGV[0] �ǳ����ڤ���ʸ�������Ѥ��Ƴؽ����롣


#-------------------------------------------------------------------------------------
#                        require
#-------------------------------------------------------------------------------------

use Env;
use File::Basename;
unshift(@INC, dirname($0), "$HOME/usr/lib/perl", "$HOME/SLM/lib/perl");

require "Help.pm";
require "FancyPrint.pm";
require "class/IntStr.pm";


#-------------------------------------------------------------------------------------
#                        check arguments
#-------------------------------------------------------------------------------------

(((@ARGV == 1) || (@ARGV == 2)) && ($ARGV[0] ne "-help")) || &Help($0);
print STDERR join(" ", basename($0), @ARGV), "\n";

$STEP = 4**shift;                                 # �ؽ������ѥ���ʸ�Υ��ƥå�
$TEST = (@ARGV) ? shift : undef;


#-------------------------------------------------------------------------------------
#                        ���̤��ѿ����ؿ����������ɤ߹���
#-------------------------------------------------------------------------------------

do "dofile/CrossEntropyBy.perl";
do "dofile/CrossEntropyByWord.perl";


#-------------------------------------------------------------------------------------
#                        $WordIntStr ������
#-------------------------------------------------------------------------------------

(-e ($FILE = "WordIntStr.text")) ||               # �ե����뤬���뤫���ʤ����к��롣
    &WordIntStr($FILE, map(sprintf($CTEMPL, $_), @Kcross));
$WordIntStr = new IntStr($FILE);


#-------------------------------------------------------------------------------------
#                        �ؽ������ѥ�������
#-------------------------------------------------------------------------------------

$Lchar = $Lword = $Lsent = 0;                     # ʸ�����������ǿ���ʸ��
$Lknown = 0;                                      # ���η����ǿ�

goto NoL1 if ($TEST);
foreach $CORPUS (map(sprintf($CTEMPL, $_), @Kcross)){
    open(CORPUS) || die "Can't open $CORPUS: $!\n";
    warn "Reading $CORPUS\n";
    while (<CORPUS>){                             # ʸñ�̤Υ롼��
        ($.%$STEP == 0) || next;
        $Lsent++;
        $Lchar += scalar(&Morphs2Chars($_));      # ʸ���������ޤޤʤ�
        @word = &Morphs2Words($_);                # ʸ���������ޤޤʤ�
        $Lword += @word;
        $Lknown += scalar(grep($WordIntStr->int($_), @word));
    }
    close(CORPUS);
}
NoL1:


#-------------------------------------------------------------------------------------
#                        �ƥ��ȥ����ѥ�������
#-------------------------------------------------------------------------------------

$Tchar = $Tword = $Tsent = 0;                     # ʸ�����������ǿ���ʸ��
$Tknown = 0;                                      # ���η����ǿ�

$CORPUS = $TEST ? $TEST : sprintf($CTEMPL, 10);   # �ƥ��ȥ����ѥ�
open(CORPUS) || die "Can't open $CORPUS: $!\n";
warn "Reading $CORPUS\n";
while (<CORPUS>){                                 # ʸñ�̤Υ롼��
    $Tsent++;
    $Tchar += scalar(&Morphs2Chars($_));          # ʸ���������ޤޤʤ�
    @word = &Morphs2Words($_);                    # ʸ���������ޤޤʤ�
    $Tword += @word;
    $Tknown += scalar(grep($WordIntStr->int($_), @word));
#    print join("\n", grep(! $WordIntStr->int($_), @word)), "\n";
}
close(CORPUS);
warn "\n";
#exit;

#-------------------------------------------------------------------------------------
#                        ���̤ν���
#-------------------------------------------------------------------------------------

printf("STEP%d\n", $ARGV[0]);
printf("-----------------------------------------------------------\n");
printf("        |  ʸ    ��  |  ñ �� ��  |  ʸ �� ��  |  ���С�Ψ \n");
printf("--------+------------+------------+------------+-----------\n");
goto NoL2 if ($TEST);
printf(" ��  �� | %10s | %10s | %10s | %7.2f %% \n",
       map(&InsertCommas($_), $Lsent, $Lword, $Lchar), 100*$Lknown/$Lword);
NoL2:
printf(" �ƥ��� | %10s | %10s | %10s | %7.2f %% \n",
       map(&InsertCommas($_), $Tsent, $Tword, $Tchar), 100*$Tknown/$Tword);
printf("-----------------------------------------------------------\n");


#-------------------------------------------------------------------------------------
#                        close
#-------------------------------------------------------------------------------------

exit(0);


#=====================================================================================
#                        END
#=====================================================================================
